@layer tw-components {
  .genderSwitch {
    &:has(input[value="male"]:checked) {
      & .genderSwitchCard:has(input[value="male"]) {
        color: var(--color-tertiary);
        background-color: theme("color.tertiary/0.08");
        border-color: var(--color-tertiary);
      }
      & .genderIcon {
        color: var(--color-tertiary);
        & [data-male] {
          opacity: 1;
        }
        & [data-female] {
          opacity: 0;
          transform: rotate(-25deg);
        }
      }
    }

    &:has(input[value="female"]:checked) {
      & .genderSwitchCard:has(input[value="female"]) {
        color: var(--color-primary);
        background-color: theme("color.primary/0.08");
        border-color: var(--color-primary);
      }
      & .genderIcon {
        color: var(--color-primary);
        & [data-female] {
          opacity: 1;
        }
        & [data-male] {
          opacity: 0;
          transform: rotate(25deg);
        }
      }
    }
  }

  .genderSwitchCard {
    &:where(:hover, :focus-within):has(input[value="male"]) {
      border-color: theme("color.tertiary/0.4");
      background-color: theme("color.tertiary/0.05");
    }
    &:where(:hover, :focus-within):has(input[value="female"]) {
      border-color: theme("color.primary/0.4");
      background-color: theme("color.primary/0.05");
    }
    & [data-part="label"] {
      height: 100%;
      justify-content: center;
    }
    &:has(:focus-visible):focus-within {
      &:has(input[value="male"]) {
        outline-color: theme("color.tertiary/0.4");
      }
      &:has(input[value="female"]) {
        outline-color: theme("color.primary/0.4");
      }
    }
  }

  .genderWrapper {
    &:has(input:checked) .genderIcon circle {
      transform: none;
    }
  }

  .genderIcon {
    & g {
      transform-origin: center;
      opacity: 0;
      transition: all 0.3s ease-out;
    }
    & circle {
      transform-origin: center;
      transform: scale(0.2);
      transition: transform 0.2s ease-out;
    }
  }
}
